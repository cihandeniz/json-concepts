(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{402:function(t,e,a){"use strict";a.r(e);var s=a(44),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"introduction"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#introduction"}},[t._v("#")]),t._v(" Introduction")]),t._v(" "),a("p",[t._v('"JSON Concepts" is a schema specification in JSON format which allows you to\ncreate a conceptual design for any type of data structure, especially those\nthat represent a schema.')]),t._v(" "),a("p",[t._v("A conceptual design is a file in JSON format with a "),a("code",[t._v(".concepts.json")]),t._v(" extension.\nThese files are referred as concepts files throughout the document. Below is an\nexample of a concepts file;")]),t._v(" "),a("p",[a("code",[t._v("CONCEPTS: service.concepts.json")])]),t._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"$service+"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"$parameter*"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"$type"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"response"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"$responseType"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("Although it is more or less of a self explanatory example, what this document\nrepresents will become more and more clear as you go throughout this document.\nFor now, we only need you to realise that this file defines concepts to\nvalidate a schema like the following;")]),t._v(" "),a("p",[a("code",[t._v("SCHEMA: greeting.service.json")])]),t._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"sayHello"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"name"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"string"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"response"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"string"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"about-specifications"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#about-specifications"}},[t._v("#")]),t._v(" About Specifications")]),t._v(" "),a("p",[t._v("Every specification introduces a feature of JSON Concepts and there will be one\nor more cases to clearly define the feature. Just like above examples, there\nwill be a sample concepts file and a sample schema to demonstrate that case.")]),t._v(" "),a("h2",{attrs:{id:"about-syntax"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#about-syntax"}},[t._v("#")]),t._v(" About Syntax")]),t._v(" "),a("p",[t._v("To keep its syntax short, JSON Concepts makes a heavy use of special\ncharacters. This is a design decision to make the syntax expressive, just like\nregular expressions.")]),t._v(" "),a("p",[t._v("For readability there are two basic rules about usage of special characters;")]),t._v(" "),a("ol",[a("li",[t._v("They should mean only one thing")]),t._v(" "),a("li",[t._v("The meaning should be familiar for an acceptable reason\n"),a("ol",[a("li",[t._v("It may have the same meaning in another language or standard")]),t._v(" "),a("li",[t._v("Name or shape of the symbol makes sense")])])])]),t._v(" "),a("p",[t._v("Any special character usage that doesn't suit above rules should be taken into\nreconsideration.")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Character")]),t._v(" "),a("th",[t._v("Meaning")]),t._v(" "),a("th",[t._v("Familiarity")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("$")]),t._v(" "),a("td",[t._v("variable")]),t._v(" "),a("td",[t._v("variables in php, bash, powershell")])]),t._v(" "),a("tr",[a("td",[t._v("#")]),t._v(" "),a("td",[t._v("macro")]),t._v(" "),a("td",[t._v("c macros, c# preprocessors")])]),t._v(" "),a("tr",[a("td",[t._v(":")]),t._v(" "),a("td",[t._v("type")]),t._v(" "),a("td",[t._v("uml, swift, scala")])]),t._v(" "),a("tr",[a("td",[t._v("@")]),t._v(" "),a("td",[t._v("meta-data")]),t._v(" "),a("td",[t._v("java annotations")])]),t._v(" "),a("tr",[a("td",[t._v("?")]),t._v(" "),a("td",[t._v("zero or one")]),t._v(" "),a("td",[t._v("regex, if-else, null propagation")])]),t._v(" "),a("tr",[a("td",[t._v("+")]),t._v(" "),a("td",[t._v("one or more")]),t._v(" "),a("td",[t._v("regex")])]),t._v(" "),a("tr",[a("td",[t._v("*")]),t._v(" "),a("td",[t._v("zero or more, any")]),t._v(" "),a("td",[t._v("regex, wildcard")])]),t._v(" "),a("tr",[a("td",[t._v("{,}")]),t._v(" "),a("td",[t._v("quantifier")]),t._v(" "),a("td",[t._v("regex")])]),t._v(" "),a("tr",[a("td",[t._v("/")]),t._v(" "),a("td",[t._v("path")]),t._v(" "),a("td",[t._v("urls")])]),t._v(" "),a("tr",[a("td",[t._v("..")]),t._v(" "),a("td",[t._v("parent")]),t._v(" "),a("td",[t._v("file paths")])]),t._v(" "),a("tr",[a("td",[t._v("**")]),t._v(" "),a("td",[t._v("any child")]),t._v(" "),a("td",[t._v("file path wildcard")])]),t._v(" "),a("tr",[a("td",[t._v("\\")]),t._v(" "),a("td",[t._v("escape")]),t._v(" "),a("td",[t._v("regular escape character")])]),t._v(" "),a("tr",[a("td",[t._v("_")]),t._v(" "),a("td",[t._v("self or current")]),t._v(" "),a("td",[t._v("??")])]),t._v(" "),a("tr",[a("td",[t._v("&")]),t._v(" "),a("td",[t._v("and")]),t._v(" "),a("td",[t._v("bitwise and")])]),t._v(" "),a("tr",[a("td",[t._v("|")]),t._v(" "),a("td",[t._v("or")]),t._v(" "),a("td",[t._v("bitwise or")])])])])])}),[],!1,null,null,null);e.default=r.exports}}]);